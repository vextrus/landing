name: Vextrus ERP Comprehensive Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  PLAYWRIGHT_BROWSERS_PATH: ms-playwright

jobs:
  accessibility-testing:
    name: WCAG AA Accessibility Compliance
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        npx playwright install --with-deps ${{ matrix.browser }}
    
    - name: Run accessibility tests
      run: npx playwright test tests/accessibility/wcag-compliance.test.ts --browser=${{ matrix.browser }}
    
    - name: Upload accessibility results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: accessibility-results-${{ matrix.browser }}
        path: test-results/accessibility-report.json
        retention-days: 30
    
    - name: Comment PR with accessibility results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = JSON.parse(fs.readFileSync('test-results/accessibility-report.json', 'utf8'));
          const comment = `## üîç Accessibility Test Results - ${{ matrix.browser }}
          
          **WCAG AA Score:** ${report.summary?.averageScore || 'N/A'}%
          **Violations:** ${report.summary?.totalViolations || 0}
          **Status:** ${report.summary?.averageScore >= 90 ? '‚úÖ Passed' : '‚ùå Failed'}
          
          <details>
          <summary>View detailed results</summary>
          
          | Module | Score | Violations | Contrast Ratio |
          |--------|-------|------------|----------------|
          ${report.modules?.map(m => 
            `| ${m.name} | ${m.score}% | ${m.violations} | ${m.contrastRatio}:1 |`
          ).join('\n') || '| No data available | - | - | - |'}
          
          </details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  performance-testing:
    name: Cross-Browser Performance Testing
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        browser: [chromium, firefox, webkit]
        exclude:
          # WebKit doesn't work well on Windows
          - os: windows-latest
            browser: webkit
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        npx playwright install --with-deps ${{ matrix.browser }}
    
    - name: Run performance tests
      run: npx playwright test tests/performance/cross-browser-performance.test.ts --browser=${{ matrix.browser }}
    
    - name: Analyze Core Web Vitals
      run: |
        node -e "
        const fs = require('fs');
        const report = JSON.parse(fs.readFileSync('test-results/performance-report.json', 'utf8'));
        const metrics = report.coreWebVitals || [];
        
        console.log('=== Core Web Vitals ===');
        metrics.forEach(m => {
          console.log(\`\${m.browser}: LCP=\${m.lcp}ms FID=\${m.fid}ms CLS=\${m.cls}\`);
        });
        
        const avgLCP = metrics.reduce((sum, m) => sum + m.lcp, 0) / metrics.length;
        if (avgLCP > 2500) {
          console.error('‚ùå LCP exceeds 2.5s threshold');
          process.exit(1);
        }
        "
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results-${{ matrix.os }}-${{ matrix.browser }}
        path: |
          test-results/performance-report.json
          playwright-report/
        retention-days: 30

  visual-regression:
    name: Visual Regression Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        npx playwright install --with-deps chromium
    
    - name: Run visual regression tests
      run: npx playwright test tests/visual/visual-regression.test.ts
    
    - name: Upload visual differences
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: visual-regression-failures
        path: |
          tests/visual/screenshots/diff/
          tests/visual/screenshots/current/
        retention-days: 30
    
    - name: Update baseline screenshots
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        cp -r tests/visual/screenshots/current/* tests/visual/screenshots/baseline/
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add tests/visual/screenshots/baseline/
        git diff --quiet && git diff --staged --quiet || git commit -m "Update visual regression baselines"
        git push

  comprehensive-report:
    name: Generate Comprehensive Test Report
    needs: [accessibility-testing, performance-testing, visual-regression]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: test-artifacts
    
    - name: Aggregate test results
      run: |
        mkdir -p test-results
        find test-artifacts -name "*.json" -exec cp {} test-results/ \;
    
    - name: Generate comprehensive report
      run: npm run test:report
    
    - name: Deploy report to GitHub Pages
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./test-results
        destination_dir: test-reports/${{ github.run_number }}
    
    - name: Update test status badge
      run: |
        TOTAL=$(jq '.summary.totalTests' test-results/aggregated-report.json)
        PASSED=$(jq '.summary.passed' test-results/aggregated-report.json)
        PERCENTAGE=$((PASSED * 100 / TOTAL))
        
        if [ $PERCENTAGE -ge 95 ]; then
          COLOR="brightgreen"
        elif [ $PERCENTAGE -ge 80 ]; then
          COLOR="yellow"
        else
          COLOR="red"
        fi
        
        curl -X POST https://img.shields.io/badge/Tests-$PERCENTAGE%25-$COLOR \
          -H "Content-Type: application/json" \
          -d '{"schemaVersion": 1, "label": "Tests", "message": "'$PERCENTAGE'%", "color": "'$COLOR'"}'
    
    - name: Send Slack notification
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            text: "Vextrus ERP Tests Failed",
            attachments: [{
              color: 'danger',
              fields: [
                { title: 'Workflow', value: '${{ github.workflow }}', short: true },
                { title: 'Run', value: '${{ github.run_number }}', short: true },
                { title: 'Branch', value: '${{ github.ref }}', short: true },
                { title: 'View Report', value: 'https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/test-reports/${{ github.run_number }}', short: false }
              ]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          http://localhost:3000
          http://localhost:3000/ecosystem
          http://localhost:3000/ecosystem/financial
          http://localhost:3000/ecosystem/hr
        uploadArtifacts: true
        temporaryPublicStorage: true
        configPath: .lighthouserc.json
    
    - name: Validate Lighthouse scores
      run: |
        node -e "
        const fs = require('fs');
        const results = JSON.parse(fs.readFileSync('.lighthouseci/manifest.json', 'utf8'));
        
        const scores = results.map(r => ({
          url: r.url,
          performance: r.summary.performance * 100,
          accessibility: r.summary.accessibility * 100,
          bestPractices: r.summary['best-practices'] * 100,
          seo: r.summary.seo * 100
        }));
        
        console.log('=== Lighthouse Scores ===');
        scores.forEach(s => {
          console.log(\`\${s.url}:\`);
          console.log(\`  Performance: \${s.performance}\`);
          console.log(\`  Accessibility: \${s.accessibility}\`);
          console.log(\`  Best Practices: \${s.bestPractices}\`);
          console.log(\`  SEO: \${s.seo}\`);
        });
        
        const failed = scores.some(s => 
          s.performance < 90 || 
          s.accessibility < 90 || 
          s.bestPractices < 90 || 
          s.seo < 90
        );
        
        if (failed) {
          console.error('‚ùå Lighthouse scores below threshold');
          process.exit(1);
        }
        "

  deploy-testing-dashboard:
    name: Deploy Testing Dashboard
    needs: comprehensive-report
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build testing dashboard
      run: |
        npm run build
        cp -r components/testing/TestingDashboard.tsx out/testing-dashboard/
    
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./out/testing-dashboard